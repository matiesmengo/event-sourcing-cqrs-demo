services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"   # Spring Boot
      - "29092:29092" # Schema Registry
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.1
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092

  # Postgres (event store)
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: demo
      POSTGRES_PASSWORD: demo
      POSTGRES_DB: demoEventDrivenDB #change db name
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U demo -d demoEventDrivenDB" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger (traces)
  jaeger:
    image: jaegertracing/all-in-one:1.74.0
    container_name: jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - METRICS_STORAGE_TYPE=prometheus
    ports:
      - '16686:16686' # Web UI
      - '4317:4317' # gRPC OpenTelemetry Protocol
      - '4318:4318' # HTTP OpenTelemetry Protocol
      - '6831:6831/udp' # Thrift/UDP/Agent
      - '6832:6832/udp' # Thrift/UDP/Agent
    networks:
      - observability

  # Prometheus (metrics)
  prometheus:
    image: prom/prometheus:v3.7.2
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - kafka
    networks:
      - observability

  # Grafana (dashboards)
  grafana:
    image: grafana/grafana:12.2
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/home-dashboard.json
    volumes:
      - ./observability/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./observability/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
      - jaeger
      - loki
    networks:
      - observability

  # Loki (logs)
  loki:
    image: grafana/loki:3.3.4
    container_name: loki
    command: ["-config.file=/etc/loki/loki-config.yaml"]
    ports:
      - "3100:3100"
    volumes:
      - ./observability/loki/config/loki-config.yaml:/etc/loki/loki-config.yaml
      - ./observability/loki/chunks:/loki/chunks
    networks:
      - observability

  # Promtail (local logs)
  promtail:
    image: grafana/promtail:3.3.4
    container_name: promtail
    volumes:
      - ./observability/promtail/promtail-config.yaml:/etc/promtail/promtail-config.yaml
      - ./observability/temp:/host/logs
    command: -config.file=/etc/promtail/promtail-config.yaml
    depends_on:
      - loki
    networks:
      - observability

networks:
  observability:
    driver: bridge

volumes:
  pgdata:
